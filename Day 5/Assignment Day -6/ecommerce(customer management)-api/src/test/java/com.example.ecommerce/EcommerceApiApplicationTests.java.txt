package com.example.ecommerce;

import com.example.ecommerce.entity.*;
import com.example.ecommerce.repository.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class EcommerceApiApplicationTests {

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private OrderItemRepository orderItemRepository;

    private Customer testCustomer;
    private Product testProduct;

    @BeforeEach
    void setup() {
        // Clear repositories before each test
        orderItemRepository.deleteAll();
        orderRepository.deleteAll();
        productRepository.deleteAll();
        customerRepository.deleteAll();

        // Add a test customer
        testCustomer = new Customer();
        testCustomer.setFirstName("Aarav");
        testCustomer.setLastName("Sharma");
        testCustomer.setEmail("aarav.sharma@test.com");
        testCustomer.setPassword("password");
        testCustomer.setAddress("123 MG Road, Bengaluru");
        testCustomer.setPhoneNumber("9876543210");
        customerRepository.save(testCustomer);

        // Add a test product
        testProduct = new Product();
        testProduct.setName("iPhone 15");
        testProduct.setDescription("Latest Apple smartphone");
        testProduct.setPrice(BigDecimal.valueOf(99999));
        testProduct.setQuantity(10);
        testProduct.setCategory("Electronics");
        productRepository.save(testProduct);
    }

    // ---------------- Customer Tests ----------------
    @Test
    void testCreateAndRetrieveCustomer() {
        Optional<Customer> customerOpt = customerRepository.findById(testCustomer.getId());
        assertThat(customerOpt).isPresent();
        assertThat(customerOpt.get().getEmail()).isEqualTo("aarav.sharma@test.com");
    }

    @Test
    void testUpdateCustomer() {
        testCustomer.setAddress("456 Park Street, Mumbai");
        customerRepository.save(testCustomer);

        Customer updated = customerRepository.findById(testCustomer.getId()).get();
        assertThat(updated.getAddress()).isEqualTo("456 Park Street, Mumbai");
    }

    @Test
    void testListAllCustomers() {
        List<Customer> customers = customerRepository.findAll();
        assertThat(customers.size()).isEqualTo(1);
    }

    // ---------------- Product Tests ----------------
    @Test
    void testCreateAndRetrieveProduct() {
        Optional<Product> productOpt = productRepository.findById(testProduct.getId());
        assertThat(productOpt).isPresent();
        assertThat(productOpt.get().getName()).isEqualTo("iPhone 15");
    }

    @Test
    void testUpdateProduct() {
        testProduct.setPrice(BigDecimal.valueOf(94999));
        productRepository.save(testProduct);

        Product updated = productRepository.findById(testProduct.getId()).get();
        assertThat(updated.getPrice()).isEqualTo(BigDecimal.valueOf(94999));
    }

    @Test
    void testListAllProducts() {
        List<Product> products = productRepository.findAll();
        assertThat(products.size()).isEqualTo(1);
    }

    // ---------------- Order Tests ----------------
    @Test
    void testPlaceAndRetrieveOrder() {
        Order order = new Order();
        order.setCustomer(testCustomer);
        order.setTotalAmount(BigDecimal.valueOf(99999));
        order.setOrderDate(LocalDateTime.now());
        order.setStatus(OrderStatus.PENDING);

        orderRepository.save(order);

        OrderItem item = new OrderItem();
        item.setOrder(order);
        item.setProduct(testProduct);
        item.setQuantity(1);
        item.setPrice(testProduct.getPrice());
        orderItemRepository.save(item);

        Order savedOrder = orderRepository.findById(order.getOrderId()).get();
        assertThat(savedOrder.getOrderItems()).hasSize(1);
        assertThat(savedOrder.getTotalAmount()).isEqualTo(BigDecimal.valueOf(99999));
    }

    @Test
    void testUpdateOrderStatus() {
        Order order = new Order();
        order.setCustomer(testCustomer);
        order.setTotalAmount(BigDecimal.valueOf(99999));
        order.setOrderDate(LocalDateTime.now());
        order.setStatus(OrderStatus.PENDING);
        orderRepository.save(order);

        order.setStatus(OrderStatus.SHIPPED);
        orderRepository.save(order);

        Order updated = orderRepository.findById(order.getOrderId()).get();
        assertThat(updated.getStatus()).isEqualTo(OrderStatus.SHIPPED);
    }

    @Test
    void testListOrdersByCustomer() {
        Order order1 = new Order();
        order1.setCustomer(testCustomer);
        order1.setTotalAmount(BigDecimal.valueOf(99999));
        order1.setOrderDate(LocalDateTime.now());
        order1.setStatus(OrderStatus.PENDING);
        orderRepository.save(order1);

        Order order2 = new Order();
        order2.setCustomer(testCustomer);
        order2.setTotalAmount(BigDecimal.valueOf(199999));
        order2.setOrderDate(LocalDateTime.now());
        order2.setStatus(OrderStatus.PENDING);
        orderRepository.save(order2);

        List<Order> orders = orderRepository.findByCustomerId(testCustomer.getId());
        assertThat(orders.size()).isEqualTo(2);
    }
}
